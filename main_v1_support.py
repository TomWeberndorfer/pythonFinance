#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 03, 2018 10:50:55 AM
import sys
import os
from tkinter import messagebox
from Main import start_main

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
# TODO ev in config file -->  gui load
filepath = ROOT_DIR + '\\DataFiles\\'


class MyController:
    def __init__(self, parent):
        self.parent = parent
        self.model = MyModel(self)  # initializes the model
        self.view = w  # initializes the view
        self.view.Match.config(command=self.all_parameter_dicts_changed)
        self.view.ButtonRunStrategy.config(command=self.start_screening())
        self.view.Scrolledlistbox_selectStrategy.bind('<<ListboxSelect>>', self.listbox_onselect)
        self.all_parameter_dicts_changed()
        self.available_strategies_changed()

    def start_screening(self):
        pass

    # event handlers
    def quitButtonPressed(self):
        self.parent.destroy()

    def add_button_pressed(self):
        self.model.add_to_list(self.view.entry_text.get())
        self.model.add_to_all_parameter_dicts({self.view.entry_text.get(): self.view.entry_text.get()})

    def clear_button_pressed(self):
        self.model.clear_list()

    def all_parameter_dicts_changed(self):
        # model internally chages and needs to signal a change
        test = self.model.get_all_parameter_dicts()
        for key, value in test.items():
            w.Scrolledtext1.insert(END, "{'" + key + "':" + str(value) + "}")
            w.Scrolledtext1.insert(END, "\n")

    def available_strategies_changed(self):
        # model internally chages and needs to signal a change
        test = self.model.getList()
        for value in test:
            w.Scrolledlistbox_selectStrategy.insert(END, value)

    def add_available_indices(self):
        # w.Text1.update(str({'w52hi_parameter_dict': {'check_days': 7, 'min_cnt': 3, 'min_vol_dev_fact': 1.2, 'within52w_high_fact': 0.98}}))
        # w.Text1.insert(END, 'test')
        w.Scrolledlistbox1.insert(END, 'test')

    def listbox_onselect(self, evt):
        # Note here that Tkinter passes an event object to listbox_onselect()
        w = evt.widget
        index = int(w.curselection()[0])
        value = w.get(index)
        print('You selected item %d: "%s"' % (index, value))

    def OnListboxSelectionChanged(self, val):
        # NOTE: If your listbox's select mode is MULTIPLE, then you may use this portion of code
        selections = val.widget.curselection()

        print("---------------------------")

        if (selections != ()):
            for index in selections:
                print(self.sarcCountries[int(index)])

        print("---------------------------")


class MyModel:
    def __init__(self, vc):
        self.vc = vc
        self.available_strategies = ["SimplePatternNewsStrategy", "W52HighTechnicalStrategy"]
        w52hi_parameter_dict = {'check_days': 7, 'min_cnt': 3, 'min_vol_dev_fact': 1.2, 'within52w_high_fact': 0.98}
        parameter_dict = {'news_threshold': 0.7, 'german_tagger': filepath + 'nltk_german_classifier_data.pickle'}
        self.all_parameter_dicts = {'w52hi_parameter_dict': w52hi_parameter_dict, 'parameter_dict': parameter_dict,
                                    'data_source': 'iex', 'weeks_delta': 52}

    # Delegates-- Model would call this on internal change
    def all_parameter_dicts_changed(self):
        self.vc.all_parameter_dicts_changed()

    # setters and getters
    def get_all_parameter_dicts(self):
        return self.all_parameter_dicts

    def add_to_all_parameter_dicts(self, item):
        self.all_parameter_dicts.update(item)
        self.all_parameter_dicts_changed()

    def clear_all_parameter_dicts(self):
        self.all_parameter_dicts = {}
        self.all_parameter_dicts_changed()

    # Delegates-- Model would call this on internal change
    def list_changed(self):
        self.vc.list_changed_delegate()

    # setters and getters
    def getList(self):
        return self.available_strategies

    def add_to_list(self, item):
        myList = self.available_strategies
        myList.append(item)
        self.available_strategies = myList
        self.list_changed()

    def clear_list(self):
        self.available_strategies = []
        self.list_changed()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    app = MyController(root)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import main_v1

    main_v1.vp_start_gui()
