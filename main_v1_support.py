#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 03, 2018 10:50:55 AM
import _pickle as pickle
import traceback
from threading import Thread
from tkinter import messagebox

from MvcModel import MvcModel
from StockAnalysis import run_analysis
from tkinter import *
import webbrowser as wb
import ast
from tkinter import filedialog

from Utils.GlobalVariables import *
from Utils.GuiUtils import GuiUtils
from Utils.common_utils import print_err_message


class MyController:
    """
    Classs for the controlling of mvc design with gui
    """

    def __init__(self, parent, view):
        self.parent = parent
        self.model = MvcModel(self)  # initializes the model
        self.view = view  # initializes the view
        self.view.ButtonRunStrategy.config(command=self.start_screening)
        self.view.Scrolledlistbox_selectStrategy.bind('<<ListboxSelect>>', self.listbox_onselect)
        self.view.Scrolledtreeview1.bind("<Double-1>", self.on_double_click)
        self.all_parameter_dicts_changed()
        self.available_strategies_changed()
        self.load_strategy_parameter_from_file(GlobalVariables.get_data_files_path() + "ParameterFile.pickle")
        self.load_other_parameter_from_file(GlobalVariables.get_data_files_path() + "OtherParameterFile.pickle")
        self.other_params_changed()
        # self.model.update_column_list(["Rank"]) #TODO rank irgendwo anders realisieren
        init_result_table(self.view.Scrolledtreeview1, self.model.get_column_list())

    def on_double_click(self, event):
        """
        TODO beschreiben und fixe url weg
        :param event:
        :return:
        """
        try:
            cur_selection = self.view.Scrolledtreeview1.selection()[0]
            cur_stock = self.view.Scrolledtreeview1.item(cur_selection)

            stock_name = cur_stock['values'][0]  # 0 --> name is first
            url_to_open = "http://www.finanzen.at/suchergebnisse?_type=Aktien&_search="
            wb.open_new_tab(url_to_open + stock_name)
        except IndexError as e:
            pass  # nothing to do for index error (may clicked at header)
        except Exception as e:
            print_err_message("Exception while opening result stock!", e, str(traceback.format_exc()))

    def start_screening(self):
        """
        start the screening thread for NON blocking GUI.
        :return: nothing
        """

        if not self.model.get_is_thread_running():
            thread = Thread(target=self.screening)
            thread.start()

    def screening(self):
        """
        Method to start the screening once
        :return: nothing, results are saved in the model.
        """
        try:
            selection_values = self.model.get_strategy_selection_value()

            if selection_values == "" or len(selection_values) <= 0:
                messagebox.showerror("Selection Error", "Please select a strategy first!")
                return

            if not self.accept_parameters_from_text():
                return

            self.model.set_is_thread_running(True)
            print("Screening started...")
            self.model.clear_result_stock_data_container_list()
            strategy_params = self.model.get_all_parameter_dicts()
            other_params = self.model.get_other_params()
            results = run_analysis(selection_values, strategy_params, other_params)

            self.model.extend_result_stock_data_container_list(results)
        except Exception as e:
            print_err_message("Exception while screening.", e, str(traceback.format_exc()))

        self.model.set_is_thread_running(False)

    def accept_parameters_from_text(self):
        """
        Method to accept the changes in the scrolled text for the parameters.
        :return: True, if parameters are valid and updated.
        """
        try:
            content = self.view.Scrolledtext_params.get(1.0, END)
            content_dict = ast.literal_eval(content)
            content_others = self.view.Scrolled_other_parameters.get(1.0, END)
            content_others_dict = ast.literal_eval(content_others)

            if content_dict == {}:
                messagebox.showerror("Parameters empty", "Please insert parameters")
                return False

            if content_others_dict == {}:
                messagebox.showerror("Other Parameters empty", "Please insert parameters")
                return False

            self.model.clear_all_parameter_dicts()
            self.model.add_to_all_parameter_dicts(content_dict)

            self.model.clear_other_params()
            self.model.add_to_other_params(content_others_dict)

        except Exception as e:
            messagebox.showerror("Parameters not valid", "Please insert valid parameters: " + str(e))
            return False

        return True

    def load_strategy_parameter_from_file(self, file_path):
        """
        Loads the parameters into the GUI from a given filepath and file.
        :param file_path:
        :return: nothing
        """
        try:
            with open(file_path, "rb") as f:
                self.model.clear_all_parameter_dicts()
                self.model.clear_available_strategies_list()
                items = pickle.load(f)
                self.model.add_to_all_parameter_dicts(items)
                for item in items:
                    self.model.add_to_available_strategies(item)

        except Exception as e:
            print_err_message("Exception while loading strategy parameter from file!", e, str(traceback.format_exc()))
            return

        self.model.add_to_log("Params Read")

    def load_other_parameter_from_file(self, file_path):
        """
        Loads the parameters into the GUI from a given filepath and file.
        :param file_path:
        :return: nothing
        """
        try:
            with open(file_path, "rb") as f:
                self.model.clear_other_params()
                items = pickle.load(f)
                self.model.add_to_other_params(items)

        except Exception as e:
            print_err_message("Exception while loading other parameter from file!", e, str(traceback.format_exc()))
            return

        self.model.add_to_log("Params Read")

    def insert_log(self, log_text):
        """
        Insert log text into the model.
        :param log_text:
        :return: -
        """
        self.model.add_to_log(log_text)

    def dump_strategy_parameter_to_file(self, file_path=GlobalVariables.get_data_files_path() + "ParameterFile.pickle"):
        """
        dumps the parameters to a global given file
        :param file_path:
        :return:
        """

        try:
            content = self.view.Scrolledtext_params.get(1.0, END)
            content_dict = ast.literal_eval(content)

            if content_dict == {}:
                messagebox.showerror("Parameters empty", "Please insert parameters")
            else:
                self.model.add_to_all_parameter_dicts(content_dict)
                with open(file_path, "wb") as f:
                    pickle.dump(self.model.get_all_parameter_dicts(), f)

                self.model.add_to_log("Params Saved")

        except Exception as e:
            print_err_message("Exception while dump_strategy_parameter_to_file!", e, str(traceback.format_exc()))
            return

    def dump_other_parameter_to_file(self,
                                     file_path=GlobalVariables.get_data_files_path() + "OtherParameterFile.pickle"):
        """
        dumps the parameters to a global given file
        :param file_path:
        :return:
        """
        try:
            content_others = self.view.Scrolled_other_parameters.get(1.0, END)
            content_others_dict = ast.literal_eval(content_others)

            if content_others_dict == {}:
                messagebox.showerror("Other Parameters empty", "Please insert parameters")
            else:
                self.model.add_to_other_params(content_others_dict)
                with open(file_path, "wb") as f:
                    pickle.dump(self.model.get_other_params(), f)

                self.model.add_to_log("Other Params Saved")

        except Exception as e:
            print_err_message("Exception while dump_other_parameter_to_file!", e, str(traceback.format_exc()))
            return

    # event handlers
    def quit_button_pressed(self):
        self.parent.destroy()

    def all_parameter_dicts_changed(self):
        w.Scrolledtext_params.delete(1.0, END)
        parameters = self.model.get_all_parameter_dicts()
        self.insert_text_into_gui(w.Scrolledtext_params, str(parameters))

    def other_params_changed(self):
        w.Scrolled_other_parameters.delete(1.0, END)
        parameters = self.model.get_other_params()
        self.insert_text_into_gui(w.Scrolled_other_parameters, str(parameters))

    def log_changed_delegate(self):
        self.insert_text_into_gui(w.Scrolledtext_log, "", delete=True)
        logs = self.model.get_log()
        for log in logs:
            self.insert_text_into_gui(w.Scrolledtext_log, log)
            self.insert_text_into_gui(w.Scrolledtext_log, "\n")

    def available_strategies_changed(self):
        self.insert_text_into_gui(w.Scrolledlistbox_selectStrategy, "", delete=True, start=0)
        # model internally chages and needs to signal a change
        available_strategies_list = self.model.getList()
        for available_strategy in available_strategies_list:
            self.insert_text_into_gui(w.Scrolledlistbox_selectStrategy, available_strategy)

    def is_thread_running_changed(self):
        if self.model.get_is_thread_running():
            w.ButtonRunStrategyRepetitive['state'] = 'disabled'
            w.ButtonRunStrategy['state'] = 'disabled'
        else:
            w.ButtonRunStrategy['state'] = 'normal'
            w.ButtonRunStrategyRepetitive['state'] = 'normal'

    def result_stock_data_container_list_changed(self):
        """
        Update the columns and data of the view, of stock data container list changed.
        Additionally, it adds the not already available columns to the MvcModel and fill not available columns with dummy.
        :return: -
        """

        tree = w.Scrolledtreeview1
        tree.delete(*tree.get_children())
        stock_data_container_list = self.model.get_result_stock_data_container_list()

        for result_container in stock_data_container_list:
            try:
                is_updated = self.model.update_column_list(result_container.get_names_and_values().keys())

                if is_updated:
                    init_result_table(self.view.Scrolledtreeview1, self.model.get_column_list())

                GuiUtils.insert_into_treeview(self.view.Scrolledtreeview1, self.model.get_column_list(),
                                              result_container.get_names_and_values(), result_container.get_rank())

            except Exception as e:
                print_err_message("", e, str(traceback.format_exc()))
                continue

    def listbox_onselect(self, evt):
        # Note here that Tkinter passes an event object to listbox_onselect()
        widget = evt.widget
        try:
            selected_text_list = [widget.get(i) for i in widget.curselection()]
        except Exception as e:
            selected_text_list = []

        print("You selected items: " + str(selected_text_list))
        self.model.set_strategy_selection_value(selected_text_list)

    def insert_text_into_gui(self, element, text, delete=False, start=1.0, end=END):
        """
        optionally deletes the given element and optionally insert text into given element.
        :param element: element to insert into (ex: Scrolledtext)
        :param text: text to insert
        :param delete: true, if delete content first
        :param start: start case, ex.: 1.0 or 0
        :param end: END tag
        :return: nothing
        """
        try:
            if delete:
                element.delete(start, end)
            if text is not None and len(text) > 0:
                element.insert(end, text)

            element.see("end")
        except Exception as e:
            print_err_message("can not insert text into gui!", e,
                              str(traceback.format_exc()))

    def set_status(self, str_status):
        if str_status is not "" and len(str_status) > 1:
            w.TLabel_status['text'] = str_status


def init(top, gui, *args, **kwargs):
    global w, top_level, root, app
    w = gui
    top_level = top
    root = top
    app = MyController(root, w)
    redirector()

    return app


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def save():
    file_path = filedialog.asksaveasfilename(initialdir=GlobalVariables.get_data_files_path(),
                                             title="Select pickle strategy parameterfile")

    app.dump_strategy_parameter_to_file(file_path)


def save_other_params():
    file_path = filedialog.asksaveasfilename(initialdir=GlobalVariables.get_data_files_path(),
                                             title="Select pickle other parameterfile")

    app.dump_other_parameter_to_file(file_path)


def quit():
    app.quit_button_pressed()


def edit():
    pass


def load_params():
    file_path = filedialog.askopenfilename(initialdir=GlobalVariables.get_data_files_path(),
                                           title="Select pickle strategy parameterfile")

    app.load_strategy_parameter_from_file(file_path)


def load_other_params():
    file_path = filedialog.askopenfilename(initialdir=GlobalVariables.get_data_files_path(),
                                           title="Select pickle other parameterfile")

    app.load_other_parameter_from_file(file_path)


def init_result_table(tree_view, columns):
    if columns is not None and len(columns) > 0:

        col_2 = ["Rank"]
        col_2.extend(columns)
        tree_view.configure(columns=col_2)

        for i in range(0, len(col_2)):
            heading_num = "#" + str(i)
            tree_view.heading(heading_num, text=col_2[i], anchor="center")

            if len(col_2[i]) > 8:  # TODO begründen / kommentieren
                tree_view.column(heading_num, width="200")
            else:
                tree_view.column(heading_num, width="100")
            tree_view.column(heading_num, minwidth="20")
            tree_view.column(heading_num, stretch="1")
            tree_view.column(heading_num, anchor="w")


class StdoutRedirector():
    '''A class for redirecting stdout to this Text widget.'''

    def write(self, str):
        # TODO
        if 'status_update ' in str:
            app.insert_text_into_gui(w.Scrolledtext_log, str)
            app.set_status(str)
        else:
            app.insert_text_into_gui(w.Scrolledtext_log, str)
            app.set_status(str)

    def flush(self):
        pass


def redirector():
    """
    redirects print(..) --> log text
    :return:
    """
    import sys
    sys.stdout = StdoutRedirector()
