#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 03, 2018 10:50:55 AM
import _pickle as pickle
from threading import Thread
from tkinter import messagebox

from MvcModel import MyModel
from StockAnalysis import run_analysis
from tkinter import *
import webbrowser as wb
import ast
from tkinter import filedialog

from Utils.GlobalVariables import *


class MyController:
    """
    Classs for the controlling of mvc design with gui
    """

    def __init__(self, parent):
        self.parent = parent
        self.model = MyModel(self)  # initializes the model
        self.view = w  # initializes the view
        self.view.ButtonRunStrategy.config(command=self.start_screening)
        self.view.Scrolledlistbox_selectStrategy.bind('<<ListboxSelect>>', self.listbox_onselect)
        self.view.Scrolledtreeview1.bind("<Double-1>", self.on_double_click)
        self.all_parameter_dicts_changed()
        self.available_strategies_changed()
        self.load_strategy_parameter_from_file(GlobalVariables.get_data_files_path() + "ParameterFile.pickle")
        self.load_other_parameter_from_file(GlobalVariables.get_data_files_path() + "OtherParameterFile.pickle")
        self.other_params_changed()
        self.column_list = []
        #TODO
        #init_result_table(self.view, [])
        init_result_table(self.view, ["Recommendation", "Stockname", "Ticker", "Stock Exchange", "Positive Value",
                                      "Negative Value", "Current Value", "Target Price", "Original News",
                                      "Used Strategies"])

    def on_double_click(self, event):
        try:
            cur_selection = self.view.Scrolledtreeview1.selection()[0]
            cur_stock = self.view.Scrolledtreeview1.item(cur_selection)

            stock_name = cur_stock['values'][0]  # 0 --> name is first
            url_to_open = "http://www.finanzen.at/suchergebnisse?_type=Aktien&_search="
            wb.open_new_tab(url_to_open + stock_name)
        except Exception as e:
            print("Exception while opening result stock:" + str(e))

    def start_screening(self):
        """
        start the screening thread for NON blocking GUI.
        :return: nothing
        """

        if not self.model.get_is_thread_running():
            thread = Thread(target=self.screening)
            thread.start()

    def screening(self):
        """
        Method to start the screening once
        :return: nothing, results are saved in the model.
        """
        try:
            selection_values = self.model.get_strategy_selection_value()

            if selection_values == "" or len(selection_values) <= 0:
                messagebox.showerror("Selection Error", "Please select a strategy first!")
                return

            if not self.accept_parameters_from_text():
                return

            self.model.set_is_thread_running(True)
            print("Screening started...")
            self.model.clear_result_stock_data_container_list()
            strategy_params = self.model.get_all_parameter_dicts()
            other_params = self.model.get_other_params()
            results = run_analysis(selection_values, strategy_params, other_params)
            self.model.extend_result_stock_data_container_list(results)
        except Exception as e:
            print(str(e))

        self.model.set_is_thread_running(False)

    def accept_parameters_from_text(self):
        """
        Method to accept the changes in the scrolled text for the parameters.
        :return: True, if parameters are valid and updated.
        """
        try:
            content = self.view.Scrolledtext_params.get(1.0, END)
            content_dict = ast.literal_eval(content)
            content_others = self.view.Scrolled_other_parameters.get(1.0, END)
            content_others_dict = ast.literal_eval(content_others)

            if content_dict == {}:
                messagebox.showerror("Parameters empty", "Please insert parameters")
                return False

            if content_others_dict == {}:
                messagebox.showerror("Other Parameters empty", "Please insert parameters")
                return False

            self.model.clear_all_parameter_dicts()
            self.model.add_to_all_parameter_dicts(content_dict)

            self.model.clear_other_params()
            self.model.add_to_other_params(content_others_dict)

        except Exception as e:
            messagebox.showerror("Parameters not valid", "Please insert valid parameters: " + str(e))
            return False

        return True

    def load_strategy_parameter_from_file(self, file_path):
        """
        Loads the parameters into the GUI from a given filepath and file.
        :param file_path:
        :return: nothing
        """
        self.model.clear_all_parameter_dicts()
        self.model.clear_available_strategies_list()

        try:
            with open(file_path, "rb") as f:
                items = pickle.load(f)
                self.model.add_to_all_parameter_dicts(items)
                for item in items:
                    self.model.add_to_available_strategies(item)

            with open(GlobalVariables.get_data_files_path() + "OtherParameterFile.pickle", "rb") as f:
                items = pickle.load(f)
                self.model.add_to_other_params(items)

        except Exception as e:
            print(str(e))
            return

        self.model.add_to_log("Params Read")

    def load_other_parameter_from_file(self, file_path):
        """
        Loads the parameters into the GUI from a given filepath and file.
        :param file_path:
        :return: nothing
        """
        self.model.clear_other_params()

        try:

            with open(file_path, "rb") as f:
                items = pickle.load(f)
                self.model.add_to_other_params(items)

        except Exception as e:
            print(str(e))
            return

        self.model.add_to_log("Params Read")

    def insert_log(self, log_text):
        """
        Insert log text into the model.
        :param log_text:
        :return: -
        """
        self.model.add_to_log(log_text)

    def dump_strategy_parameter_to_file(self, file_path=GlobalVariables.get_data_files_path() + "ParameterFile.pickle"):
        """
        dumps the parameters to a global given file
        :param file_path:
        :return:
        """
        content = self.view.Scrolledtext_params.get(1.0, END)
        content_dict = ast.literal_eval(content)

        if content_dict == {}:
            messagebox.showerror("Parameters empty", "Please insert parameters")
        else:
            self.model.add_to_all_parameter_dicts(content_dict)
            with open(file_path, "wb") as f:
                pickle.dump(self.model.get_all_parameter_dicts(), f)

            self.model.add_to_log("Params Saved")

    def dump_other_parameter_to_file(self,
                                     file_path=GlobalVariables.get_data_files_path() + "OtherParameterFile.pickle"):
        """
        dumps the parameters to a global given file
        :param file_path:
        :return:
        """
        content_others = self.view.Scrolled_other_parameters.get(1.0, END)
        content_others_dict = ast.literal_eval(content_others)

        if content_others_dict == {}:
            messagebox.showerror("Other Parameters empty", "Please insert parameters")
        else:
            self.model.add_to_other_params(content_others_dict)
            with open(file_path, "wb") as f:
                pickle.dump(self.model.get_other_params(), f)

            self.model.add_to_log("Other Params Saved")

    # event handlers
    def quit_button_pressed(self):
        self.parent.destroy()

    def all_parameter_dicts_changed(self):
        w.Scrolledtext_params.delete(1.0, END)
        parameters = self.model.get_all_parameter_dicts()
        self.insert_text_into_gui(w.Scrolledtext_params, str(parameters))

    def other_params_changed(self):
        w.Scrolled_other_parameters.delete(1.0, END)
        parameters = self.model.get_other_params()
        self.insert_text_into_gui(w.Scrolled_other_parameters, str(parameters))

    def log_changed_delegate(self):
        self.insert_text_into_gui(w.Scrolledtext_log, "", delete=True)
        logs = self.model.get_log()
        for log in logs:
            self.insert_text_into_gui(w.Scrolledtext_log, log)
            self.insert_text_into_gui(w.Scrolledtext_log, "\n")

    def available_strategies_changed(self):
        self.insert_text_into_gui(w.Scrolledlistbox_selectStrategy, "", delete=True, start=0)
        # model internally chages and needs to signal a change
        available_strategies_list = self.model.getList()
        for available_strategy in available_strategies_list:
            self.insert_text_into_gui(w.Scrolledlistbox_selectStrategy, available_strategy)

    def is_thread_running_changed(self):
        if self.model.get_is_thread_running():
            w.ButtonRunStrategyRepetitive['state'] = 'disabled'
            w.ButtonRunStrategy['state'] = 'disabled'
        else:
            w.ButtonRunStrategy['state'] = 'normal'
            w.ButtonRunStrategyRepetitive['state'] = 'normal'

    def result_stock_data_container_list_changed(self):
        """
        TODO
        :return:
        """

        try:
            tree = w.Scrolledtreeview1
            tree.delete(*tree.get_children())
            stock_data_container_list = self.model.get_result_stock_data_container_list()

            recommendation_text = ""
            pos_class = 0
            neg_class = 0
            for res in stock_data_container_list:
                if res.get_stock_name() is not None:
                    try:
                        pos_class = round(res.prob_dist().prob("pos"), 2)
                        neg_class = round(res.prob_dist().prob("neg"), 2)
                        if pos_class > neg_class:
                            recommendation_text = "BUY"
                        else:
                            recommendation_text = "SELL"
                    # if no prop dist is given (technical strategies)
                    except Exception as e:
                        recommendation_text = "BUY"
                        pos_class = ""
                        neg_class = ""

                try:
                    str_stock_target_price = str(res.stock_target_price())
                except Exception as e:
                    str_stock_target_price = "N.A"

                try:
                    str_orignal_news = res.original_news()
                except Exception as e:
                    str_orignal_news = "N.A"

                tree.insert('', 'end', text=recommendation_text, values=(res.get_stock_name(), res.stock_ticker(),
                                                                         res.stock_exchange(), str(pos_class),
                                                                         str(neg_class),
                                                                         str(res.stock_current_prize()),
                                                                         str_stock_target_price, str_orignal_news,
                                                                         str(res.get_strategies())))

                #init_result_table(self.view,list(res.get_names_and_values().keys()))
                #tree.insert('', 'end', text=recommendation_text, values=(list(res.get_names_and_values().values())))

            treeview_sort_column(tree, 'Positive Value', False)

        except Exception as e:
            sys.stderr.write("EXCEPTION: " + str(e) + "\n")

    def listbox_onselect(self, evt):
        # Note here that Tkinter passes an event object to listbox_onselect()
        widget = evt.widget
        try:
            selected_text_list = [widget.get(i) for i in widget.curselection()]
        except Exception as e:
            selected_text_list = []

        print("You selected items: " + str(selected_text_list))
        self.model.set_strategy_selection_value(selected_text_list)

    def insert_text_into_gui(self, element, text, delete=False, start=1.0, end=END):
        """
        optionally deletes the given element and optionally insert text into given element.
        :param element: element to insert into (ex: Scrolledtext)
        :param text: text to insert
        :param delete: true, if delete content first
        :param start: start case, ex.: 1.0 or 0
        :param end: END tag
        :return: nothing
        """
        if delete:
            element.delete(start, end)
        if text is not None and len(text) > 0:
            element.insert(end, text)

        element.see("end")

    def set_status(self, str_status):
        if str_status is not "" and len(str_status) > 1:
            w.TLabel_status['text'] = str_status


def init(top, gui, *args, **kwargs):
    global w, top_level, root, app
    w = gui
    top_level = top
    root = top
    app = MyController(root)
    redirector()


# todo ins gui utils
def treeview_sort_column(tv, col, reverse):
    """
    https://stackoverflow.com/questions/1966929/tk-treeview-column-sort
    :param tv:
    :param col:
    :param reverse:
    :return:
    """
    l = [(tv.set(k, col), k) for k in tv.get_children('')]
    try:
        l.sort(key=lambda t: int(t[0]), reverse=reverse)
    except ValueError:
        l.sort(reverse=reverse)

    for index, (val, k) in enumerate(l):
        tv.move(k, '', index)

    tv.heading(col, command=lambda: treeview_sort_column(tv, col, not reverse))


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def save():
    file_path = filedialog.asksaveasfilename(initialdir=GlobalVariables.get_data_files_path(),
                                             title="Select pickle strategy parameterfile")

    app.dump_strategy_parameter_to_file(file_path)


def save_other_params():
    file_path = filedialog.asksaveasfilename(initialdir=GlobalVariables.get_data_files_path(),
                                             title="Select pickle other parameterfile")

    app.dump_other_parameter_to_file(file_path)


def quit():
    app.quit_button_pressed()


def edit():
    pass


def load_params():
    file_path = filedialog.askopenfilename(initialdir=GlobalVariables.get_data_files_path(),
                                           title="Select pickle strategy parameterfile")

    app.load_strategy_parameter_from_file(file_path)


def load_other_params():
    file_path = filedialog.askopenfilename(initialdir=GlobalVariables.get_data_files_path(),
                                           title="Select pickle other parameterfile")

    app.load_other_parameter_from_file(file_path)


def init_result_table(view, columns):
    view.Scrolledtreeview1.configure(
        columns=columns)

    for i in range(0, len(columns)):
        heading_num = "#" + str(i)
        view.Scrolledtreeview1.heading(heading_num, text=columns[i], anchor="center")
        view.Scrolledtreeview1.column(heading_num, width="200")
        view.Scrolledtreeview1.column(heading_num, minwidth="20")
        view.Scrolledtreeview1.column(heading_num, stretch="1")
        view.Scrolledtreeview1.column(heading_num, anchor="w")


class StdoutRedirector():
    '''A class for redirecting stdout to this Text widget.'''

    def write(self, str):
        # TODO
        if 'status_update ' in str:
            app.insert_text_into_gui(w.Scrolledtext_log, str)
            app.set_status(str)
        else:
            app.insert_text_into_gui(w.Scrolledtext_log, str)
            app.set_status(str)

    def flush(self):
        pass


def redirector():
    """
    redirects print(..) --> log text
    :return:
    """
    import sys
    sys.stdout = StdoutRedirector()
