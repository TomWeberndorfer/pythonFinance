#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 03, 2018 10:50:55 AM


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1



class MyController:
    def __init__(self, parent):
        self.parent = parent
        self.model = MyModel(self)  # initializes the model
        self.view = w  # initializes the view
        self.view.Match.config(command=self.all_parameter_dicts_changed)
        self.all_parameter_dicts_changed()

    # event handlers
    def quitButtonPressed(self):
        self.parent.destroy()

    def add_button_pressed(self):
        self.model.add_to_list(self.view.entry_text.get())
        self.model.add_to_all_parameter_dicts({self.view.entry_text.get(): self.view.entry_text.get()})

    def clear_button_pressed(self):
        self.model.clear_list()

    def all_parameter_dicts_changed(self):
        # model internally chages and needs to signal a change
        test = self.model.get_all_parameter_dicts()
        for key, value in test.items():
                w.Scrolledtext1.insert(END, "{'" + key + "':" + str(value) + "}")
                w.Scrolledtext1.insert(END, "\n")

    def add_available_indices(self):
        #w.Text1.update(str({'w52hi_parameter_dict': {'check_days': 7, 'min_cnt': 3, 'min_vol_dev_fact': 1.2, 'within52w_high_fact': 0.98}}))
        #w.Text1.insert(END, 'test')
        w.Scrolledlistbox1.insert(END, 'test')


class MyModel:
    def __init__(self, vc):
        self.vc = vc
        self.myList = ["CDAX", "SP500", "Test1"]
        w52hi_parameter_dict = {'check_days': 7, 'min_cnt': 3, 'min_vol_dev_fact': 1.2, 'within52w_high_fact': 0.98}
        self.all_parameter_dicts = {'w52hi_parameter_dict': w52hi_parameter_dict, 'test': {'Test param': 0.1}}

    # Delegates-- Model would call this on internal change
    def all_parameter_dicts_changed(self):
        self.vc.all_parameter_dicts_changed()

    # setters and getters
    def get_all_parameter_dicts(self):
        return self.all_parameter_dicts

    def add_to_all_parameter_dicts(self, item):
        self.all_parameter_dicts.update(item)
        self.all_parameter_dicts_changed()

    def clear_all_parameter_dicts(self):
        self.all_parameter_dicts = {}
        self.all_parameter_dicts_changed()


    # Delegates-- Model would call this on internal change
    def list_changed(self):
        self.vc.list_changed_delegate()

    # setters and getters
    def getList(self):
        return self.myList

    def add_to_list(self, item):
        myList = self.myList
        myList.append(item)
        self.myList = myList
        self.list_changed()

    def clear_list(self):
        self.myList = []
        self.list_changed()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    app = MyController(root)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import main_v1
    main_v1.vp_start_gui()

