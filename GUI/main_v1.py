#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 03, 2018 12:45:38 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

from GUI import main_v1_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = XYZ_Framework_ (root)
    main_v1_support.init(root, top)
    root.mainloop()

w = None
def create_XYZ_Framework_(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = XYZ_Framework_ (w)
    main_v1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_XYZ_Framework_():
    global w
    w.destroy()
    w = None


class XYZ_Framework_:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("664x858+718+27")
        top.title("XYZ_Framework ")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="wheat")
        top.configure(highlightcolor="black")



        self.TPanedwindow1 = ttk.Panedwindow(top, orient="vertical")
        self.TPanedwindow1.place(relx=0.03, rely=0.01, relheight=0.85
                , relwidth=0.88)
        self.TPanedwindow1.configure(width=585)
        self.TPanedwindow1_f1 = ttk.Labelframe(height=-174.0
                , text='Strategy parameter')
        self.TPanedwindow1.add(self.TPanedwindow1_f1)
        self.TPanedwindow1_f2 = ttk.Labelframe(height=276
                , text='Result / Logging')
        self.TPanedwindow1.add(self.TPanedwindow1_f2)
        self.TPanedwindow1_f3 = ttk.Labelframe(text='Results- Stocks')
        self.TPanedwindow1.add(self.TPanedwindow1_f3)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.tPa33_f1_scr40 = ScrolledListBox(self.TPanedwindow1_f1)
        self.tPa33_f1_scr40.place(relx=0.0, rely=0.51, relheight=0.44
                , relwidth=0.99)
        self.tPa33_f1_scr40.configure(background="white")
        self.tPa33_f1_scr40.configure(disabledforeground="#a3a3a3")
        self.tPa33_f1_scr40.configure(font="TkFixedFont")
        self.tPa33_f1_scr40.configure(foreground="black")
        self.tPa33_f1_scr40.configure(highlightbackground="#d9d9d9")
        self.tPa33_f1_scr40.configure(highlightcolor="#d9d9d9")
        self.tPa33_f1_scr40.configure(selectbackground="#c4c4c4")
        self.tPa33_f1_scr40.configure(selectforeground="black")
        self.tPa33_f1_scr40.configure(width=10)

        self.Scrolledtext1 = ScrolledText(self.TPanedwindow1_f1)
        self.Scrolledtext1.place(relx=0.0, rely=0.06, relheight=0.37
                , relwidth=0.99)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap=NONE)

        self.st_logging = ScrolledText(self.TPanedwindow1_f2)
        self.st_logging.place(relx=0.0, rely=0.11, relheight=0.78, relwidth=0.99)

        self.st_logging.configure(background="white")
        self.st_logging.configure(font="TkTextFont")
        self.st_logging.configure(foreground="black")
        self.st_logging.configure(highlightbackground="#d9d9d9")
        self.st_logging.configure(highlightcolor="black")
        self.st_logging.configure(insertbackground="black")
        self.st_logging.configure(insertborderwidth="3")
        self.st_logging.configure(selectbackground="#c4c4c4")
        self.st_logging.configure(selectforeground="black")
        self.st_logging.configure(width=10)
        self.st_logging.configure(wrap=NONE)

        self.Match = Button(top)
        self.Match.place(relx=0.08, rely=0.93, height=24, width=45)
        self.Match.configure(activebackground="#f9f9f9")
        self.Match.configure(activeforeground="black")
        self.Match.configure(background="#d9d9d9")
        self.Match.configure(disabledforeground="#b8a786")
        self.Match.configure(foreground="black")
        self.Match.configure(highlightbackground="wheat")
        self.Match.configure(highlightcolor="black")
        self.Match.configure(pady="0")
        self.Match.configure(text='''Match''')

        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor=SE, relx=1.0, rely=1.0)



    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [350, 626, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0




# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()


